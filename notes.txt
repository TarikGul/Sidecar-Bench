******------ Blocks to query ------******
blocks = {
  '28831', -- Sudo setKey(0, -> 1)
  '29258', -- sudo.sudo(forceTransfer)
  '188836', -- sudo.sudoUncheckedWeight runtime upgrade(v5 generalized proxies identity)
  '197681', -- sudo.sudo(forceTransfer)
  '199405', -- sudo.sudoUncheckedWeight runtime upgrade(v6 council / sudo can move claims)
  '200732', -- sudo.sudo(batch assign indices)
  '214264', -- sudo.sudoUncheckedWeight runtime upgrade(v7 frozen indices)
  '214576', -- proxy sudo batch of transfers
  '243601', -- proxy sudo batch of transfers
  '244358', -- sudo.sudoUncheckedWeight runtime upgrade(v8 (un)reserve events)
  '287352', -- sudo.sudo forceTransfer
  '300532', -- proxy.addProxy for `Any` from sudo(direct to proxy module)
  '301569', -- proxy sudo mint claim
  '302396', -- proxy sudo set vested claim
  '303079', -- sudo.sudoUncheckedWeight runtime upgrade(v9 add vested forceTransfer and new origin filtering)
  '304468', -- proxy sudo set balance(W3F)(failed)
  '313396', -- proxy sudo set storage
  '314201', -- sudo.sudoUncheckedWeight runtime upgrade(v10 allow sudo to do anything(i.e.fix new filtering))
  '314326', -- proxy sudo set balance(W3F)
  '325148', -- scheduler dispatched
  '326556', -- sudo.sudo force new era always
  '341469', -- proxy sudo force transfer
  '342400', -- sudo.sudoUncheckedWeight runtime upgrade(v11 scale validator count functions)
  '342477', -- sudo.sudo schedule regular validator set increases
  '442600', -- scheduler dispatched
  '443963', -- sudo.sudoUncheckedWeight runtime upgrade(v12 new staking rewards curve)
  '444722', -- proxy sudo batch of transfers
  '516904', -- sudo.sudo batch of transfers
  '528470', -- sudo.sudoUncheckedWeight runtime upgrade(v13 payout creates controller allow voting registrar proxy refactor as_sub)
  '543510', -- sudo.sudo force transfer
  '645697', -- proxy sudo batch of transfers
  '744556', -- proxy sudo batch of transfers
  '746085', -- sudo.sudoUncheckedWeight runtime upgrade(v15 enable council elections purchase)
  '746605', -- sudo.sudoAs add governance proxy
  '786421', -- sudo force transfer
  '787923', -- sudo.sudoUncheckedWeight runtime upgrade(v16 enable governance)
  '790128', -- proxy sudo batch of transfers
  '799302', -- runtime upgraded no more sudo
  '799310', -- after v17
}

***-- Configuration to set luarocks path --***
-- luarocks path >> ~/.bashrc

******------ Print luarocks paths ------******
-- luarocks path

******------    Chain commands    ------******
-- rural-low-8355
-- target/release/polkadot --name "rural-low-8355" --no-prometheus --no-telemetry --database=rocksdb --pruning=archive --wasm-execution=Compiled --chain=polkadot
-- target/release/polkadot --base-path=../node-db/local/ --pruning=archive --no-prometheus --no-telemetry --database=rocksdb --wasm-execution=Compiled --chain=polkadot

******------     Lua shortcuts    ------******
-- print(package.path) -- where .lua files are searched for
./?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua;/usr/local/lib/lua/5.1/?.lua;/usr/local/lib/lua/5.1/?/init.lua;/usr/
share/lua/5.1/?.lua;/usr/share/lua/5.1/?/init.lua

-- print(package.cpath) -- where native modules are searched for
./?.so;/usr/local/lib/lua/5.1/?.so;/usr/lib/x86_64-linux-gnu/lua/5.1/?.so;/usr/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so

******------       Lua Notes      ------******
The public Lua API consists of a global table and a number of global functions:
  wrk = {
    scheme  = "http",
    host    = "localhost",
    port    = nil,
    method  = "GET",
    path    = "/",
    headers = {},
    body    = nil,
    thread  = <userdata>,
  }

  function wrk.format(method, path, headers, body)

    wrk.format returns a HTTP request string containing the passed parameters
    merged with values from the wrk table.

  function wrk.lookup(host, service)

    wrk.lookup returns a table containing all known addresses for the host
    and service pair. This corresponds to the POSIX getaddrinfo() function.

  function wrk.connect(addr)

    wrk.connect returns true if the address can be connected to, otherwise
    it returns false. The address must be one returned from wrk.lookup().

  The following globals are optional, and if defined must be functions:

    global setup    -- called during thread setup
    global init     -- called when the thread is starting
    global delay    -- called to get the request delay
    global request  -- called to generate the HTTP request
    global response -- called with HTTP response data
    global done     -- called with results of run

Setup

  function setup(thread)

  The setup phase begins after the target IP address has been resolved and all
  threads have been initialized but not yet started.

  setup() is called once for each thread and receives a userdata object
  representing the thread.

    thread.addr             - get or set the thread's server address
    thread:get(name)        - get the value of a global in the thread's env
    thread:set(name, value) - set the value of a global in the thread's env
    thread:stop()           - stop the thread

  Only boolean, nil, number, and string values or tables of the same may be
  transfered via get()/set() and thread:stop() can only be called while the
  thread is running.

Running

  function init(args)
  function delay()
  function request()
  function response(status, headers, body)

  The running phase begins with a single call to init(), followed by
  a call to request() and response() for each request cycle.

  The init() function receives any extra command line arguments for the
  script which must be separated from wrk arguments with "--".

  delay() returns the number of milliseconds to delay sending the next
  request.

  request() returns a string containing the HTTP request. Building a new
  request each time is expensive, when testing a high performance server
  one solution is to pre-generate all requests in init() and do a quick
  lookup in request().

  response() is called with the HTTP response status, headers, and body.
  Parsing the headers and body is expensive, so if the response global is
  nil after the call to init() wrk will ignore the headers and body.

Done

  function done(summary, latency, requests)

  The done() function receives a table containing result data, and two
  statistics objects representing the per-request latency and per-thread
  request rate. Duration and latency are microsecond values and rate is
  measured in requests per second.

  latency.min              -- minimum value seen
  latency.max              -- maximum value seen
  latency.mean             -- average value seen
  latency.stdev            -- standard deviation
  latency:percentile(99.0) -- 99th percentile value
  latency(i)               -- raw value and count

  summary = {
    duration = N,  -- run duration in microseconds
    requests = N,  -- total completed requests
    bytes    = N,  -- total bytes received
    errors   = {
      connect = N, -- total socket connection errors
      read    = N, -- total socket read errors
      write   = N, -- total socket write errors
      status  = N, -- total HTTP status codes > 399
      timeout = N  -- total request timeouts
    }
  }
  